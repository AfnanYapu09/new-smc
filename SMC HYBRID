//@version=5
// === Indicator Setup ===
indicator("SMC Hybrid V.1.2" ,'SMC V.1.2', overlay = true, max_bars_back = 5000, max_boxes_count = 500,max_labels_count = 500, max_lines_count = 500 )
// === Default Parameters (configuration removed) ===
PP = 5
majorBoSLineShow       = 'On'
majorBoSLineStyle      = line.style_solid
majorBoSLineColor      = input.color(color.black, "Bos", group="BOS/ChoCh")
majorChoChLineShow     = 'On'
majorChoChLineStyle    = line.style_solid
majorChoChLineColor    = input.color(#ff0000, "ChoCh", group="BOS/ChoCh")
minorBoSLineShow       = 'On'
minorBoSLineStyle      = line.style_dashed
minorLineColor         = input.color(#363a45ce, "liquidity", group="BOS/ChoCh")
minorBoSLineColor      = minorLineColor
minorChoChLineShow     = 'On'
minorChoChLineStyle    = line.style_dashed
minorChoChLineColor    = minorLineColor
showDollarLabel       = input.bool(true, "liquidity", group="BOS/ChoCh")
// === Variable Initialization ===
Open = open
High = high
Low = low
Close = close 
barIndex = bar_index
ATR =ta.atr(55)
var ArrayType = array.new_string()
var ArrayValue = array.new_float()
var ArrayIndex =  array.new_int()
var ArrayTypeAdv  = array.new_string()
var ArrayValueAdv = array.new_float()
var ArrayIndexAdv =  array.new_int()  
PASS = 0
HighPivot = ta.pivothigh(PP,PP)
LowPivot = ta.pivotlow(PP,PP)
HighValue = ta.valuewhen(HighPivot ,High[PP], 0)
LowValue = ta.valuewhen(LowPivot ,Low[PP], 0)
HighIndex = ta.valuewhen(HighPivot ,barIndex[PP], 0)
LowIndex = ta.valuewhen(LowPivot ,barIndex[PP], 0)
correctHighPivot = 0.0
correctLowPivot =  0.0
var float majorHighLevel = na
var float majorLowLevel  = na
var int majorHighIndex = na
var int majorLowIndex = na
var string majorHighType= na
var string majorLowType = na
var float minorHighLevel = na
var float minorLowLevel  = na
var int minorHighIndex   = na
var int minorLowIndex    = na
var string minorHighType = na
var string minorLowType  = na
var int lockDetecteMMinorLvl = 0
var bool Lock0 = true
var bool Lock1 = true
var bool bullishMajorChoCh = false
var bool bullishMajorBoS = false
var bool bearishMajorChoCh = false
var bool bearishMajorBoS = false
var bosMajorType  = array.new_string()
var bosMajorIndex = array.new_int()
var chochMajorType  = array.new_string()
var chochMajorIndex = array.new_int()
var int lockBreakM = 0 
var bool bullishMinorChoCh = false
var bool bullishMinorBoS = false
var bool bearishMinorChoCh = false
var bool bearishMinorBoS = false
var bosMinorType  = array.new_string()
var bosMinorIndex = array.new_int()
var chochMinorType  = array.new_string()
var chochMinorIndex = array.new_int()
var int lockBreakm = 0 
var string externalTrend = 'No Trend'
var string internalTrend = 'No Trend'

remove_last(arrType, arrValue, arrIndex) =>
    array.remove(arrType, arrType.size() - 1)
    array.remove(arrValue, arrValue.size() - 1)
    array.remove(arrIndex, arrIndex.size() - 1)

push_pivot(arrType, arrValue, arrIndex, valType, val, idx) =>
    array.push(arrType, valType)
    array.push(arrValue, val)
    array.push(arrIndex, idx)

f_drawLineLabel(idx, lvl, lstyle, lcolor, txt, labStyle, labSize, ext=extend.none) =>
    line.new(idx, lvl, bar_index, lvl, style=lstyle, color=lcolor, extend=ext)
    label.new((idx + bar_index) / 2, lvl, text=txt, color=color.rgb(0,0,0,100),
              textcolor=lcolor, style=labStyle, size=labSize)
// === Pivot and Trend Logic ===
if HighPivot  and  LowPivot
    if ArrayType.size() == 0
        PASS := 1
    else if ArrayType.size() >= 1
        if ((ArrayType.get(ArrayType.size() - 1)) == "L" or
             (ArrayType.get(ArrayType.size() - 1)) == "LL")
            if LowPivot < ArrayValue.get(ArrayType.size() - 1)
                remove_last(ArrayType, ArrayValue, ArrayIndex)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                correctLowPivot :=  LowValue
            else 
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
            correctHighPivot := HighValue  
        else if (ArrayType.get(ArrayType.size() - 1)) == "H" or 
             (ArrayType.get(ArrayType.size() - 1)) == "HH"
            if HighPivot > ArrayValue.get(ArrayType.size() - 1)
                remove_last(ArrayType, ArrayValue, ArrayIndex)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                correctHighPivot := HighValue  
            else 
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
            correctLowPivot :=  LowValue    
        else if (ArrayType.get(ArrayType.size() - 1)) == "LH"
            if HighPivot < ArrayValue.get(ArrayType.size() - 1)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                correctLowPivot :=  LowValue 
            else if HighPivot > ArrayValue.get(ArrayType.size() - 1)
                if close < ArrayValue.get(ArrayType.size() - 1)
                    remove_last(ArrayType, ArrayValue, ArrayIndex)
                    push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                    correctHighPivot := HighValue  
                else if close > ArrayValue.get(ArrayType.size() - 1)
                    push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                    correctLowPivot :=  LowValue
        else if (ArrayType.get(ArrayType.size() - 1)) == "HL"
            if LowPivot > ArrayValue.get(ArrayType.size() - 1)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                correctHighPivot := HighValue                       
            else if LowPivot < ArrayValue.get(ArrayType.size() - 1)
                if close > ArrayValue.get(ArrayType.size() - 1)
                    remove_last(ArrayType, ArrayValue, ArrayIndex)
                    push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                    correctLowPivot :=  LowValue
                else if close < ArrayValue.get(ArrayType.size() - 1)
                    push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                    correctHighPivot := HighValue                         
else if  HighPivot 
    if ArrayType.size() == 0
        array.insert(ArrayType, 0, "H")
        array.insert(ArrayValue, 0, HighValue)
        array.insert(ArrayIndex, 0, HighIndex)
        correctHighPivot := HighValue
    else if ArrayType.size() >= 1
        if ((ArrayType.get(ArrayType.size() - 1)) == "L" or
             (ArrayType.get(ArrayType.size() - 1)) == "HL" or
             (ArrayType.get(ArrayType.size() - 1)) == "LL")
            if HighPivot > ArrayValue.get(ArrayType.size() - 1)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                correctHighPivot := HighValue
            else if  HighPivot < ArrayValue.get(ArrayType.size() - 1)
                remove_last(ArrayType, ArrayValue, ArrayIndex)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                correctLowPivot :=  LowValue                         
        else if (ArrayType.get(ArrayType.size() - 1)) == "H" or 
             (ArrayType.get(ArrayType.size() - 1)) == "HH" or 
             (ArrayType.get(ArrayType.size() - 1)) == "LH"
            if (ArrayValue.get(ArrayValue.size() - 1)) < HighValue
                remove_last(ArrayType, ArrayValue, ArrayIndex)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                correctHighPivot := HighValue               
else if LowPivot 
    if ArrayType.size() == 0
        array.insert(ArrayType, 0, "L")
        array.insert(ArrayValue, 0, LowValue)
        array.insert(ArrayIndex, 0, LowIndex)
        correctLowPivot :=  LowValue
    else if ArrayType.size() >= 1
        if (ArrayType.get(ArrayType.size() - 1)) == "H" or 
             (ArrayType.get(ArrayType.size() - 1)) == "HH" or 
             (ArrayType.get(ArrayType.size() - 1)) == "LH"
            if LowPivot < ArrayValue.get(ArrayType.size() - 1)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                correctLowPivot :=  LowValue
            else if LowPivot > ArrayValue.get(ArrayType.size() - 1)
                remove_last(ArrayType, ArrayValue, ArrayIndex)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < HighValue ? "HH" : "LH" : "H", HighValue, HighIndex)
                correctHighPivot := HighValue                        
        else if (ArrayType.get(ArrayType.size() - 1)) == "L" or 
             (ArrayType.get(ArrayType.size() - 1)) == "HL" or 
             (ArrayType.get(ArrayType.size() - 1)) == "LL"
            if (ArrayValue.get(ArrayValue.size() - 1)) > LowValue
                remove_last(ArrayType, ArrayValue, ArrayIndex)
                push_pivot(ArrayType, ArrayValue, ArrayIndex, ArrayType.size()>2? ArrayValue.get(ArrayType.size() - 2) < LowValue ? "HL" : "LL" : "L", LowValue, LowIndex)
                correctLowPivot :=  LowValue
if ArrayType.size() ==  2
    if ArrayType.get(0) == 'H'
        majorHighLevel := ArrayValue.get(0)
        majorLowLevel  := ArrayValue.get(1)
        majorHighIndex := ArrayIndex.get(0)
        majorLowIndex  := ArrayIndex.get(1)
        majorHighType := ArrayType.get(0)
        majorLowType  := ArrayType.get(1)
    else if ArrayType.get(0) == 'L'
        majorHighLevel := ArrayValue.get(1)
        majorLowLevel  := ArrayValue.get(0) 
        majorHighIndex := ArrayIndex.get(1)
        majorLowIndex  := ArrayIndex.get(0)
        majorHighType := ArrayType.get(1)
        majorLowType  := ArrayType.get(0)
if  ArrayValue.size() == 1
    if Lock0
        array.insert(ArrayTypeAdv ,0 ,'M' +  ArrayType.get(0))
        array.insert(ArrayValueAdv,0 ,ArrayValue.get(0))
        array.insert(ArrayIndexAdv,0 ,ArrayIndex.get(0))   
        Lock0 := false
if  ArrayValue.size() == 2
    if Lock1
        array.insert(ArrayTypeAdv ,1 ,'M' +  ArrayType.get(1))
        array.insert(ArrayValueAdv,1 ,ArrayValue.get(1))
        array.insert(ArrayIndexAdv,1 ,ArrayIndex.get(1))   
        Lock1 := false
if ArrayValue.size() > 1
    if ArrayValue.get(ArrayValue.size()-1)[1] != ArrayValue.get(ArrayValue.size()-1)
        if str.substring(ArrayType.get(ArrayType.size()-1)[1], str.length(ArrayType.get(ArrayType.size()-1))-1) != 
             str.substring(ArrayType.get(ArrayType.size()-1), str.length(ArrayType.get(ArrayType.size()-1))-1)
            array.push(ArrayTypeAdv ,'m' +  ArrayType.get(ArrayType.size()   - 1))
            array.push(ArrayValueAdv, ArrayValue.get(ArrayValue.size() - 1))
            array.push(ArrayIndexAdv, ArrayIndex.get(ArrayIndex.size() - 1))
        else if str.substring(ArrayType.get(ArrayType.size()-1)[1], str.length(ArrayType.get(ArrayType.size()-1))-1) == 
             str.substring(ArrayType.get(ArrayType.size()-1), str.length(ArrayType.get(ArrayType.size()-1))-1)
            array.remove(ArrayValueAdv, ArrayValueAdv.size() - 1)
            array.remove(ArrayIndexAdv, ArrayIndexAdv.size() - 1)
            array.push(ArrayValueAdv, ArrayValue.get(ArrayValue.size() - 1))
            array.push(ArrayIndexAdv, ArrayIndex.get(ArrayIndex.size() - 1))
if ArrayValueAdv.size() > 1
    if close > majorHighLevel
        if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mL'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('ML')
            majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHL'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' + ArrayType.get(ArrayType.size() - 1))      
            majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) 
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLL'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M'  + ArrayType.get(ArrayType.size() - 1)) 
            majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLH' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHH' or 
             ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'MLH' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'MHH' 
            if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mHL'
                ArrayTypeAdv.remove(ArrayTypeAdv.size() - 2)
                ArrayTypeAdv.insert(ArrayValueAdv.size() - 2 , 'M' + ArrayType.get(ArrayType.size() - 2))      
                majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mLL'
                ArrayTypeAdv.remove(ArrayTypeAdv.size() - 2)
                ArrayTypeAdv.insert(ArrayValueAdv.size() - 2 , 'M' + ArrayType.get(ArrayType.size() - 2))
                majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
    if  ArrayValueAdv.get(ArrayValueAdv.size() - 1) > majorHighLevel
        if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mH'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('MH')
            majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLH'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' + ArrayType.get(ArrayType.size() - 1))  
            majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)     
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHH' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'MHH'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' + ArrayType.get(ArrayType.size() - 1))
            majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
    if close < majorLowLevel
        if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mH'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('MH')
            majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLH'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' +  ArrayType.get(ArrayType.size() - 1))      
            majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHH'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' + ArrayType.get(ArrayType.size() - 1))
            majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHL' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLL' or 
             ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'MHL' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'MLL'
            if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mLH'
                ArrayTypeAdv.remove(ArrayTypeAdv.size() - 2)
                ArrayTypeAdv.insert(ArrayValueAdv.size() - 2 , 'M' + ArrayType.get(ArrayType.size() - 2))      
                majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mHH'
                ArrayTypeAdv.remove(ArrayTypeAdv.size() - 2)
                ArrayTypeAdv.insert(ArrayValueAdv.size() - 2 , 'M' + ArrayType.get(ArrayType.size() - 2))
                majorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                majorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                majorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
    if ArrayValueAdv.get(ArrayValueAdv.size() - 1) < majorLowLevel
        if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mL'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('ML')
            majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHL'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' + ArrayType.get(ArrayType.size() - 1) ) 
            majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
        else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLL' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'MLL'
            ArrayTypeAdv.remove(ArrayTypeAdv.size() - 1)
            ArrayTypeAdv.push('M' + ArrayType.get(ArrayType.size() - 1))
            majorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
            majorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
            majorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
if ArrayTypeAdv.size() > 2  
    lockDetecteMMinorLvl := 1
    if str.pos(ArrayTypeAdv.get(ArrayTypeAdv.size() - 1),'m') == 0 and
     str.pos(ArrayTypeAdv.get(ArrayTypeAdv.size() - 2),'m') == 0   and
     str.pos(ArrayTypeAdv.get(ArrayTypeAdv.size() - 3),'M') == 0
        if str.pos(ArrayTypeAdv.get(ArrayTypeAdv.size() - 1),'H') == 2
            minorHighLevel := ArrayValueAdv.get(ArrayTypeAdv.size() - 1)
            minorLowLevel  := ArrayValueAdv.get(ArrayTypeAdv.size() - 2)
            minorHighIndex := ArrayIndexAdv.get(ArrayTypeAdv.size() - 1)
            minorLowIndex  := ArrayIndexAdv.get(ArrayTypeAdv.size() - 2)
            minorHighType  := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
            minorLowType   := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
        else if str.pos(ArrayTypeAdv.get(ArrayTypeAdv.size() - 1),'L') == 2
            minorHighLevel := ArrayValueAdv.get(ArrayTypeAdv.size() - 2)
            minorLowLevel  := ArrayValueAdv.get(ArrayTypeAdv.size() - 1) 
            minorHighIndex := ArrayIndexAdv.get(ArrayTypeAdv.size() - 2)
            minorLowIndex  := ArrayIndexAdv.get(ArrayTypeAdv.size() - 1)
            minorHighType  := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
            minorLowType   := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
    if lockDetecteMMinorLvl == 1
        if close > minorHighLevel
            if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHL'     
                minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) 
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLL'
                minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLH' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHH'
                if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mHL'     
                    minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                    minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                    minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
                else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mLL'
                    minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                    minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                    minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
        if  ArrayValueAdv.get(ArrayValueAdv.size() - 1) > minorHighLevel
            if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLH' 
                minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) 
                minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)                    
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHH'
                minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
                minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
        if close < minorLowLevel
            if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLH'     
                minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHH'
                minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHL' or ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLL'
                if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mLH'     
                    minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                    minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                    minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
                else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 2) == 'mHH'
                    minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                    minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                    minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
        if ArrayValueAdv.get(ArrayValueAdv.size() - 1) < minorLowLevel
            if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mHL' 
                minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
                minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
            else if ArrayTypeAdv.get(ArrayTypeAdv.size() - 1) == 'mLL' 
                minorLowLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 1)
                minorLowIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 1)
                minorLowType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 1)
                minorHighLevel := ArrayValueAdv.get(ArrayValueAdv.size() - 2)
                minorHighIndex := ArrayIndexAdv.get(ArrayIndexAdv.size() - 2)
                minorHighType := ArrayTypeAdv.get(ArrayTypeAdv.size() - 2)
    if str.pos(ArrayTypeAdv.get(ArrayTypeAdv.size() - 1),'M') == 0
        lockDetecteMMinorLvl := 0
        minorHighLevel := na
        minorLowLevel  := na
        minorHighIndex := na
        minorLowIndex  := na
        minorHighType  := na
        minorLowType   := na
        internalTrend   := 'No Trend'
if  ta.crossover(close , majorHighLevel) and  lockBreakM != majorHighIndex 
    if (externalTrend == 'No Trend' or externalTrend == 'Up Trend')
        bullishMajorBoS := true
        bosMajorType.push('Bull Major $$$')
        bosMajorIndex.push(bar_index)
        lockBreakM := majorHighIndex
        externalTrend := 'Up Trend'
        if majorBoSLineShow == 'On'
            f_drawLineLabel(majorHighIndex, majorHighLevel, majorBoSLineStyle, majorBoSLineColor, 'Bos', label.style_label_down, size.normal)
    else if externalTrend == 'Down Trend' 
        bullishMajorChoCh := true
        chochMajorType.push('Bull Major ChoCh')
        chochMajorIndex.push(bar_index)
        lockBreakM := majorHighIndex
        externalTrend := 'Up Trend'
        if majorChoChLineShow == 'On'
            f_drawLineLabel(majorHighIndex, majorHighLevel, majorChoChLineStyle, majorChoChLineColor, 'choch', label.style_label_down, size.normal)
else
    bullishMajorChoCh := false
    bullishMajorBoS   := false 
if  ta.crossunder(close, majorLowLevel) and  lockBreakM!= majorLowIndex 
    if externalTrend == 'No Trend' or externalTrend == 'Down Trend'
        bearishMajorBoS := true
        bosMajorType.push('Bear Major $$$')
        bosMajorIndex.push(bar_index)
        lockBreakM := majorLowIndex
        externalTrend := 'Down Trend'
        if majorBoSLineShow == 'On'
            f_drawLineLabel(majorLowIndex, majorLowLevel, majorBoSLineStyle, majorBoSLineColor, 'Bos', label.style_label_up, size.normal)
    else if externalTrend == 'Up Trend' 
        bearishMajorChoCh := true
        chochMajorType.push('Bear Major ChoCh')
        chochMajorIndex.push(bar_index)
        lockBreakM := majorLowIndex
        externalTrend := 'Down Trend'
        if majorChoChLineShow == 'On'
            f_drawLineLabel(majorLowIndex, majorLowLevel, majorChoChLineStyle, majorChoChLineColor, 'choch', label.style_label_up, size.normal)
else 
    bearishMajorChoCh := false 
    bearishMajorBoS   := false 
if  minorHighLevel < close  and  lockBreakm != minorHighIndex 
    if (internalTrend == 'No Trend' or internalTrend == 'Up Trend') 
        bullishMinorBoS   := true
        bosMinorType.push('Bull Minor $$$')
        bosMinorIndex.push(bar_index)
        lockBreakm := minorHighIndex
        internalTrend := 'Up Trend'
        if minorBoSLineShow  == 'On' and showDollarLabel
            f_drawLineLabel(minorHighIndex, minorHighLevel, minorBoSLineStyle, minorBoSLineColor, '$$$', label.style_label_down, size.small, extend.none)
    else if internalTrend == 'Down Trend' 
        bullishMinorChoCh := true
        chochMinorType.push('Bull Minor ChoCh')
        chochMinorIndex.push(bar_index)
        lockBreakm := minorHighIndex
        internalTrend := 'Up Trend'
        if minorChoChLineShow  == 'On' and showDollarLabel
            f_drawLineLabel(minorHighIndex, minorHighLevel, minorChoChLineStyle, minorChoChLineColor, '$$$', label.style_label_down, size.small, extend.none)
else 
    bullishMinorChoCh := false
    bullishMinorBoS   := false
if  minorLowLevel > close and  lockBreakm!= minorLowIndex 
    if internalTrend == 'No Trend' or internalTrend == 'Down Trend'
        bearishMinorBoS   := true
        bosMinorType.push('Bear Minor $$$')
        bosMinorIndex.push(bar_index)
        lockBreakm := minorLowIndex
        internalTrend := 'Down Trend'
        if minorBoSLineShow  == 'On' and showDollarLabel
            f_drawLineLabel(minorLowIndex, minorLowLevel, minorBoSLineStyle, minorBoSLineColor, '$$$', label.style_label_up, size.small, extend.none)
    else if internalTrend == 'Up Trend' 
        bearishMinorChoCh := true
        chochMinorType.push('Bear Minor ChoCh')
        chochMinorIndex.push(bar_index)
        lockBreakm := minorLowIndex
        internalTrend := 'Down Trend'
        if minorChoChLineShow  == 'On' and showDollarLabel
            f_drawLineLabel(minorLowIndex, minorLowLevel, minorChoChLineStyle, minorChoChLineColor, '$$$', label.style_label_up, size.small, extend.none)
else
    bearishMinorChoCh := false
    bearishMinorBoS   := false

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// === INPUTS ===
obGroup      = "Order Blocks"
var bool showOrderblock = true
maxBoxes     = input.int(6, "Max Boxes", group=obGroup)
colorBull    = input.color(#0066ff33, "Bullish OB Color", group=obGroup)
colorBear    = input.color(color.rgb(255, 82, 82, 80), "Bearish OB Color", group=obGroup)


// === ARRAYS ===
var box[] bullBoxes = array.new_box()
var box[] bearBoxes = array.new_box()

// === DETECT & DRAW ORDER BLOCKS ===
if showOrderblock
    // ── Bullish Order Block (Demand) ──
    if low > high[2]
        box ob = na
        if low[1] > high[3]
            ob := box.new(left = bar_index[2], top = high[2], right = bar_index, bottom = low[1], bgcolor = colorBull, border_color = color.new(colorBull, 100))
            box.set_text(ob, "Dz")
            box.set_text_halign(ob, text.align_right)
            box.set_text_size(ob, size.small)
        else if low[2] <= low[1]
            ob := box.new(left = bar_index[2], top = high[2], right = bar_index, bottom = low[2], bgcolor = colorBull, border_color = color.new(colorBull, 100))
            box.set_text(ob, "Dz")
            box.set_text_halign(ob, text.align_right)
            box.set_text_size(ob, size.small)
        else
            ob := box.new(left = bar_index[2], top = high[2], right = bar_index, bottom = low[1], bgcolor = colorBull, border_color = color.new(colorBull, 100))
            box.set_text(ob, "Dz")
            box.set_text_halign(ob, text.align_right)
            box.set_text_size(ob, size.small)
        array.push(bullBoxes, ob)
        if array.size(bullBoxes) > maxBoxes
            oldbx = array.shift(bullBoxes)
            box.delete(oldbx)

    // ── Bearish Order Block (Supply) ──
    if high < low[2]
        box ob = na
        if high[1] < low[3]
            ob := box.new(left = bar_index[2], top = low[2], right = bar_index, bottom = high[1], bgcolor = colorBear, border_color = color.new(colorBear, 100))
            box.set_text(ob, "Sz")
            box.set_text_halign(ob, text.align_right)
            box.set_text_size(ob, size.small)
        else if high[2] <= high[1]
            ob := box.new(left = bar_index[2], top = low[2], right = bar_index, bottom = high[1], bgcolor = colorBear, border_color = color.new(colorBear, 100))
            box.set_text(ob, "Sz")
            box.set_text_halign(ob, text.align_right)
            box.set_text_size(ob, size.small)
        else
            ob := box.new(left = bar_index[2], top = low[2], right = bar_index, bottom = high[2], bgcolor = colorBear, border_color = color.new(colorBear, 100))
            box.set_text(ob, "Sz")
            box.set_text_halign(ob, text.align_right)
            box.set_text_size(ob, size.small)
        array.push(bearBoxes, ob)
        if array.size(bearBoxes) > maxBoxes
            oldbx = array.shift(bearBoxes)
            box.delete(oldbx)

// === EXTEND BOXES TO CURRENT BAR ===
if array.size(bullBoxes) > 0
    for i = 0 to array.size(bullBoxes) - 1
        bx = array.get(bullBoxes, i)
        box.set_right(bx, bar_index)

if array.size(bearBoxes) > 0
    for i = 0 to array.size(bearBoxes) - 1
        bx = array.get(bearBoxes, i)
        box.set_right(bx, bar_index)

// === DELETE BOXES WHEN BOS (Break of Structure) TOUCH ===
if array.size(bullBoxes) > 0
    for i = array.size(bullBoxes) - 1 to 0
        bx = array.get(bullBoxes, i)
        if low <= box.get_top(bx)
            box.delete(bx)
            array.remove(bullBoxes, i)

if array.size(bearBoxes) > 0
    for i = array.size(bearBoxes) - 1 to 0
        bx = array.get(bearBoxes, i)
        if high >= box.get_top(bx)  // touched top of Supply OB
            box.delete(bx)
            array.remove(bearBoxes, i)
